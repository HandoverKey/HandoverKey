name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22'
  POSTGRES_VERSION: '14'
  REDIS_VERSION: '7'

jobs:
  # Security and dependency checks
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: |
          if npm audit --audit-level=high --json | jq '.vulnerabilities | length > 0'; then
            echo "High severity vulnerabilities found!"
            npm audit --audit-level=high
            exit 1
          fi

  # Code quality and linting
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript types
        run: npm run type-check

      - name: Check code formatting
        run: npm run format:check

  # Build all packages
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: [security, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all packages
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist
            apps/*/dist
          retention-days: 1

  # Unit tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        package: [core, shared, api, database]
        include:
          - package: web
            workspace: apps/web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Run unit tests for ${{ matrix.package }}
        run: |
          if [ "${{ matrix.workspace }}" != "" ]; then
            npm run test:coverage --workspace=${{ matrix.workspace }}
          else
            npm run test:coverage --workspace=packages/${{ matrix.package }}
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: |
            ${{ matrix.workspace && format('{0}/coverage/lcov.info', matrix.workspace) || format('packages/{0}/coverage/lcov.info', matrix.package) }}
          flags: ${{ matrix.package }}

  # Integration tests with database
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: handoverkey_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Setup test environment
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: handoverkey_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-for-ci
          NODE_ENV: test
        run: |
          cp env.example .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_NAME=handoverkey_test" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DB_HOST: localhost
          DB_NAME: handoverkey_test
          DB_USER: postgres
          DB_PASSWORD: postgres

      - name: Run integration tests
        run: npm run test --workspace=packages/api
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: handoverkey_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-for-ci
          NODE_ENV: test

  # End-to-end tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: handoverkey_e2e
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Setup E2E environment
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: handoverkey_e2e
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-for-e2e
          NODE_ENV: test
        run: |
          cp env.example .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_NAME=handoverkey_e2e" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Run database migrations and seed
        run: |
          npm run db:migrate
          npm run db:seed
        env:
          DB_HOST: localhost
          DB_NAME: handoverkey_e2e
          DB_USER: postgres
          DB_PASSWORD: postgres

      - name: Start application
        run: |
          npm run dev --workspace=packages/api &
          npm run dev --workspace=apps/web &
          sleep 30
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: handoverkey_e2e
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-for-e2e
          NODE_ENV: test

      - name: Run E2E tests
        run: npm run test:e2e
        if: false # Disable until E2E tests are implemented

  # Performance and load testing
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-integration]
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'performance')
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: handoverkey_perf
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup performance test environment
        run: |
          cp env.example .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_NAME=handoverkey_perf" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Run performance tests
        run: npm run test:performance
        if: false # Disable until performance tests are implemented

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker build and security scan
  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/api/Dockerfile
          push: false
          tags: handoverkey/api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Web Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web/Dockerfile
          push: false
          tags: handoverkey/web:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan API image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'handoverkey/api:test'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Scan Web image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'handoverkey/web:test'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # Deployment readiness check
  deploy-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check deployment readiness
        run: |
          echo "✅ All tests passed"
          echo "✅ Security scans completed"
          echo "✅ Build artifacts ready"
          echo "🚀 Ready for deployment"

  # Notify on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, security-scan]
    if: always()
    steps:
      - name: Notify success
        if: needs.test-unit.result == 'success' && needs.test-integration.result == 'success' && needs.security-scan.result == 'success'
        run: |
          echo "🎉 All CI checks passed!"
          echo "✅ Code quality: PASSED"
          echo "✅ Unit tests: PASSED"
          echo "✅ Integration tests: PASSED"
          echo "✅ Security scan: PASSED"

      - name: Notify failure
        if: needs.test-unit.result == 'failure' || needs.test-integration.result == 'failure' || needs.security-scan.result == 'failure'
        run: |
          echo "❌ CI checks failed!"
          echo "Unit tests: ${{ needs.test-unit.result }}"
          echo "Integration tests: ${{ needs.test-integration.result }}"
          echo "Security scan: ${{ needs.security-scan.result }}"
          exit 1